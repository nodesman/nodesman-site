ContactFormEntry.create!([
  {name: "raj", email: "flarecore@gmail.com", subject: "this is a test subject", message: "this is a test body", ip_address: nil},
  {name: "raj", email: "flarecore@gmail.com", subject: "this is a test subject", message: "this is a test body", ip_address: nil},
  {name: "Raj", email: "flarecore@gmail.com", subject: "Test Subject", message: "This is a test", ip_address: "::1"}
])
Page.create!([
  {title: "Home", content: "Welcome to Nodesman.com", page_type: "section_page", content_type: "html", url_slug: "home"},
  {title: "Portfolio", content: "This is the portfolio page.", page_type: "section_page", content_type: "markdown", url_slug: "portfolio"},
  {title: "Contact", content: "This is the page content", page_type: "section_page", content_type: "html", url_slug: "contact"},
  {title: "Articles", content: "List of articles categorized by topic. ", page_type: "section_page", content_type: "markdown", url_slug: "articles"},
  {title: "Snippets", content: "These are code snippers that for specific purposes. ", page_type: "section_page", content_type: "markdown", url_slug: "code-snippets"},
  {title: "Making Software Is Hard", content: "    <p>A lot of project managers and those in charge of software development teams think they can squeeze out more software from engineers by throwing more of them at a problem or making them work harder. Some employ all kinds of tactics to corner engineers into making commitments and holding them to it. </p>\r\n<p>They may even convert this adversarial attitude towards engineers a virtuous management tactic that every one of their peers and subordinates who also manage engineers are to emulate. Al this does is push the risk of creating software onto engineers. And that will have negative consequences. Consequences that some managers are fine with. </p>\r\n<p>They attempt to reduce software development down to a menial task like every other function. You said you will take 5 days to do this. Why is it taking longer? You are not living up to your word. Creating software is not like doing wood work or making pizza – easily repeated and well understood task. Complexities arise that increase the scope of the development in ways that were not foreseen during estimation. And this happens pretty often. </p>\r\n<p>If you are able to get software out of someone by cornering someone and extracting an outcome then you are compromising on something else. If you are able to get away with pushing the risk of software onto engineers time and time again, then they will likely not be around for much longer. If you want to deviate from this minimum cost something has to take a hit. There are no free lunches. It is up to you to figure out what that is. It can be code quality. </p>\r\n<p>It can be sustainability – your code runs the risk of not being maintainable after a point in time. It can be risking losing your staff. It can be money and time spent in bringing in additional capacity though contractors. Writing a software application well requires that a problem is thought through well. Software development is not the act of typing. It is not the translation of something from memory into words in a text file. </p>\r\n<p>The act of creating software happens in the minds of people and in their interactions with people involved in making it. It involves the careful consideration of the methodology to solve this specific problem.</p>", page_type: "article", content_type: "html", url_slug: "making-software-is-hard"},
  {title: "CSS Grid Systems : What Are They Really?", content: "   <p>Grid systems provide value by simplifying the API to layout elements on a web page. Doing it with plain CSS and HTML is far harder and requires a better understanding of the nuances of the layout elements in HTML. The grid systems hides us from the complexity.</p>\r\n<h2>How I Use Grid Systems</h2>\r\n<p>I don’t find any value in using them. I go full commando when writing front-end code. I find that I have to use a grid system only when I am maintaining software written using one before I got involved.</p>\r\n<p>I may include a grid system in a project if I sense that I will not be in the project for very long because I work on multiple projects in short periods of time. This means I will not be writing the layout code in said project forever. I ensure that the UI framework that I develop will play nicely with the CSS grid system that will eventually be used in my absence.</p>\r\n<h2>Problems with grid systems</h2>\r\n<p>The original intent behind the concept of a grid is to make the scanning of a web page easier. A web page designed with the base framework of a grid in place is easier to scan for the reader. So the only legitimate place for a grid is in Photoshop. Grid as a concept is a visual design paradigm.</p>\r\n<p>The 12 column split + gutter system that all CSS frameworks provide in itself provide no value in simplifying laying out of web pages but provide a useful framework for how we visualize the front-end of a web page.</p>\r\n<p>Somewhere along the visual design paradigm was lost in translation and now the word “Grid” has come to mean almost exclusively a CSS grid system that hides the complexities of laying out an element on a screen – a convenience tool. As far as CSS frameworks go the underlying structure of 12 columns and gutter is not even the best logical break down of a flexible UI development framework.</p>\r\n<p>If you have a custom visual design that is beyond a set of boxes stacked vertically and horizontally then you better not implement it using a grid framework. You will not achieve satisfactory results assuming you are trying to achieve near pixel perfect replication of the design. The grid system is an integer multiple of a certain width.</p>\r\n<h2>Conclusion</h2>\r\n<p>In the end it is what it is. Developers who are not CSS HTML/CSS Nazis like me find value in using it. Entire multimillion-dollar businesses have been built on it. If someone finds value in it then by all means you should continue using it.</p>\r\n<p>Anything that simplifies and hides complexity always has less flexibility than the more complex solution. Knowing where the grid systems’ limitations lie are important.</p>", page_type: "article", content_type: "html", url_slug: "css-grid-systems"}
])

// Generated by CoffeeScript 1.9.1
(function() {
  var EventEmitter, ImageGenerator, Viff, _, currentRunningDirname, events, fs, path, preprocessFolderName, reportJsonPath, screenshotPath, wrench;

  path = require('path');

  _ = require('underscore');

  fs = require('fs');

  wrench = require('wrench');

  EventEmitter = require('events').EventEmitter;

  Viff = require('./viff');

  preprocessFolderName = function(_case) {
    return encodeURIComponent(_case.key());
  };

  currentRunningDirname = process.cwd();

  screenshotPath = path.join(currentRunningDirname, './screenshots');

  reportJsonPath = path.join(currentRunningDirname, './report.json');

  events = {
    CREATE_FOLDER: 'createFolder',
    CREATE_FILE: 'createFile'
  };

  ImageGenerator = Object.create(EventEmitter.prototype);

  _.extend(ImageGenerator, events);

  _.extend(ImageGenerator, {
    resetFolderAndFile: function(screenshotPath, reportObjPath) {
      if (fs.existsSync(screenshotPath)) {
        wrench.rmdirSyncRecursive(screenshotPath);
      }
      if (fs.existsSync(reportObjPath)) {
        fs.unlinkSync(reportObjPath);
      }
      wrench.mkdirSyncRecursive(screenshotPath);
      return ImageGenerator.emit(ImageGenerator.CREATE_FOLDER, screenshotPath);
    },
    createImageFile: function(imagePath, img) {
      fs.writeFileSync(imagePath, img);
      return ImageGenerator.emit(ImageGenerator.CREATE_FILE, imagePath);
    },
    createFolder: function(folderPath) {
      if (!fs.existsSync(folderPath)) {
        fs.mkdirSync(folderPath);
        return ImageGenerator.emit(ImageGenerator.CREATE_FOLDER, folderPath);
      }
    },
    generateReportJsonFile: function(reportJsonPath, reportObj) {
      fs.writeFileSync(reportJsonPath, JSON.stringify(reportObj));
      return ImageGenerator.emit(ImageGenerator.CREATE_FILE, reportJsonPath);
    },
    reset: function() {
      return ImageGenerator.resetFolderAndFile(screenshotPath, reportJsonPath);
    },
    generateByCase: function(_case) {
      var browserFolderPath, urlFolderPath;
      browserFolderPath = path.join(screenshotPath, _case.browser);
      urlFolderPath = path.join(browserFolderPath, preprocessFolderName(_case));
      ImageGenerator.createFolder(browserFolderPath);
      ImageGenerator.createFolder(urlFolderPath);
      return _.each(_case.result.images, function(img, env) {
        var imagePath;
        imagePath = path.join(urlFolderPath, env + '.png');
        ImageGenerator.createImageFile(imagePath, img);
        return _case.result.images[env] = path.relative(currentRunningDirname, imagePath);
      });
    },
    generateReport: function(cases) {
      var compares, differences, reportObj, totalAnalysisTime;
      compares = {};
      differences = [];
      totalAnalysisTime = 0;
      _.each(cases, function(_case) {
        if (_case.result) {
          compares[_case.browser] = compares[_case.browser] || {};
          compares[_case.browser][_case.key()] = _case.result;
          if (_case.result.misMatchPercentage !== 0) {
            differences.push(_case);
          }
          return totalAnalysisTime += _case.result.analysisTime;
        } else {
          return differences.push(_case);
        }
      });
      reportObj = {
        compares: compares,
        caseCount: cases.length,
        sameCount: cases.length - differences.length,
        diffCount: differences.length,
        totalAnalysisTime: totalAnalysisTime
      };
      return ImageGenerator.generateReportJsonFile(reportJsonPath, reportObj);
    }
  });

  module.exports = ImageGenerator;

}).call(this);

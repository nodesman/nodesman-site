// Generated by CoffeeScript 1.9.1
(function() {
  var Capability, Testcase, Viff, app, caseHandler, cases, connect, fs, handleTestcase, http, imgGen, multipart, partialCanvas, prepareCachedCase, resemble, reset, resolvedCases;

  connect = require('connect');

  http = require('http');

  multipart = require('connect-multiparty');

  fs = require('fs');

  Viff = require('./viff');

  imgGen = require('./image.generator');

  Testcase = require('./testcase');

  Capability = require('./capability');

  require('./color.helper.js');

  resemble = require('./resemble');

  partialCanvas = require('./canvas.drawimage');

  cases = {};

  resolvedCases = [];

  reset = function() {
    cases = {};
    return resolvedCases.length = 0;
  };

  prepareCachedCase = function(c, capability, host, name, url, screenshot) {
    c.capabilities.push(capability);
    c.hosts.push(host);
    c.names.push(name);
    c.screenshots.push(screenshot);
    c.url = url;
    return c;
  };

  handleTestcase = function(req, callback) {
    var c, tkey, url;
    url = JSON.parse(req.body.url);
    tkey = Testcase.getPathKey(url);
    if (!cases[tkey]) {
      cases[tkey] = {
        capabilities: [],
        names: [],
        hosts: [],
        screenshots: []
      };
    }
    prepareCachedCase(cases[tkey], new Capability(JSON.parse(req.body.capabilities)), req.body.host, req.body.name, url, fs.readFileSync(req.files.image.path));
    if (cases[tkey].capabilities.length >= 2) {
      c = new Testcase(cases[tkey].capabilities[0], cases[tkey].capabilities[1], cases[tkey].hosts[0], cases[tkey].hosts[1], cases[tkey].names[0], cases[tkey].names[1], cases[tkey].url);
      return Viff.runCase(c, cases[tkey].screenshots[0], cases[tkey].screenshots[1], function(_case) {
        imgGen.generateByCase(_case);
        resolvedCases.push(_case);
        console.log("  - " + _case.browser.info + " " + (_case.key().greyColor));
        return callback && callback(null, _case);
      });
    } else {
      return callback && callback();
    }
  };

  caseHandler = function(req, resp) {
    if (req.method === 'POST' && req.url === '/') {
      return handleTestcase(req, function() {
        return resp.end();
      });
    } else if (req.method === 'GET') {
      if (resolvedCases.length > 0 && req.url === '/generate-report') {
        imgGen.generateReport(resolvedCases);
        reset();
        console.log('  report.json generated.');
        return resp.end();
      } else if (req.url === '/end') {
        console.log('  Done.');
        resp.end();
        resemble.exit();
        partialCanvas.exit();
        return process.exit(0);
      }
    } else {
      return resp.end();
    }
  };

  app = connect();

  app.use(multipart()).use(caseHandler);

  imgGen.reset();

  http.createServer(app).listen(3000);

  console.log('Viff is waiting for screenshots...\n');

}).call(this);

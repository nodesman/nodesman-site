// Generated by CoffeeScript 1.9.1
(function() {
  var _, checkIfNeedHelp, filterByGrep, help, isPureObject, mergeAndValidateConfig, parseBrowsers, parseEnvHosts, parsePaths, path, processArgv;

  _ = require('underscore');

  path = require('path');

  isPureObject = function(obj) {
    return Object.prototype.toString.call(obj) === '[object Object]';
  };

  parseBrowsers = function(value) {
    var browser, browsers, i, len, ref;
    browsers = [];
    ref = value.split(',');
    for (i = 0, len = ref.length; i < len; i++) {
      browser = ref[i];
      browser = browser.trim();
      if (!_.isEmpty(browser)) {
        browsers.push(browser);
      }
    }
    return browsers;
  };

  parseEnvHosts = function(value) {
    var env, envHostStr, envHosts, envValues, host, i, len, ref;
    envValues = value.split(',');
    envHosts = {};
    for (i = 0, len = envValues.length; i < len; i++) {
      envHostStr = envValues[i];
      if (!_.isEmpty(envHostStr)) {
        ref = envHostStr.trim().split('='), env = ref[0], host = ref[1];
        envHosts[env] = host;
      }
    }
    return envHosts;
  };

  parsePaths = function(value) {
    var i, len, p, ref, results;
    ref = value.split(',');
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      p = ref[i];
      if (!_.isEmpty(p.trim())) {
        results.push(p.trim());
      }
    }
    return results;
  };

  mergeAndValidateConfig = function(seleniumHost, browsers, envHosts, paths, reportFormat, grep, config) {
    var c, i, idx, len, name, ref;
    c = _.extend({}, config);
    ref = ['seleniumHost', 'browsers', 'envHosts', 'paths', 'reportFormat', 'grep'];
    for (idx = i = 0, len = ref.length; i < len; idx = ++i) {
      name = ref[idx];
      c[name] = arguments[idx] || c[name];
    }
    if (c.browsers === void 0 || c.browsers.length === 0) {
      c.browsers = ['firefox'];
    }
    if (c.reportFormat === void 0) {
      c.reportFormat = 'html';
    }
    if (c.seleniumHost === void 0) {
      throw new Error('--selenium-host isn\'t set correctly');
    }
    if (c.envHosts === void 0 || _.keys(c.envHosts).length < 1) {
      throw new Error('-envs aren\'t set correctly.');
    }
    if (c.paths === void 0 || c.paths.length === 0) {
      throw new Error('-paths aren\'t set correctly.');
    }
    return c;
  };

  filterByGrep = function(paths, grep) {
    var ps, ref, reg, ret;
    ref = [[], paths || []], ret = ref[0], ps = ref[1];
    reg = new RegExp(grep);
    ps.forEach(function(p, idx) {
      var target;
      if (_.isString(p)) {
        target = p;
      }
      if (_.isArray(p)) {
        target = _.first(p);
      }
      if (isPureObject(p)) {
        target = _.first(_.keys(p));
      }
      if (reg.test(target)) {
        return ret.push(p);
      }
    });
    return ret;
  };

  checkIfNeedHelp = function(args) {
    var argsCollection, i, len, needHelp, param;
    if (isPureObject(args)) {
      return false;
    }
    argsCollection = ['-browsers', '-envs', '-paths', '--report-format', '--selenium-host'];
    needHelp = true;
    for (i = 0, len = args.length; i < len; i++) {
      param = args[i];
      if (argsCollection.indexOf(param) >= 0 || param.indexOf('.config.js') > 0) {
        needHelp = false;
        break;
      }
    }
    return needHelp;
  };

  help = function() {
    var version;
    version = require('../package.json').version;
    return "Version: " + version + "\n\nUsage: viff /path/to/config_file.config.js\n\nRead More: https://github.com/winsonwq/viff\n";
  };

  processArgv = function(args) {
    var arg, browsers, c, config, envHosts, grep, paths, reportFormat, seleniumHost;
    if (checkIfNeedHelp(args)) {
      return help();
    }
    if (isPureObject(args)) {
      config = args;
    } else {
      while (arg = args.shift()) {
        switch (arg) {
          case '-browsers':
            browsers = parseBrowsers(args.shift());
            break;
          case '-envs':
            envHosts = parseEnvHosts(args.shift());
            break;
          case '-paths':
            paths = parsePaths(args.shift());
            break;
          case '--report-format':
            reportFormat = args.shift().trim();
            break;
          case '--selenium-host':
            seleniumHost = args.shift().trim();
            break;
          case '-grep':
            grep = args.shift().trim();
            break;
          default:
            if (arg.indexOf('.config.js') > 0) {
              config = require(path.resolve(process.cwd(), arg));
            }
        }
      }
    }
    c = mergeAndValidateConfig(seleniumHost, browsers, envHosts, paths, reportFormat, grep, config);
    if (grep) {
      c.paths = filterByGrep(c.paths, grep);
    }
    return c;
  };

  module.exports = processArgv;

}).call(this);

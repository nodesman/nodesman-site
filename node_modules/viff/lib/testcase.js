// Generated by CoffeeScript 1.9.1
(function() {
  var Capability, Testcase, _;

  _ = require('underscore');

  Capability = require('./capability');

  Testcase = (function() {
    function Testcase(capablityFrom, capabilityTo, hostFrom, hostTo, nameFrom, nameTo, url1) {
      this.url = url1;
      capablityFrom = new Capability(capablityFrom);
      capabilityTo = new Capability(capabilityTo);
      this.browser = capablityFrom.key();
      if (!_.isEqual(capablityFrom.key(), capabilityTo.key())) {
        this.browser = capablityFrom.key() + '-' + capabilityTo.key();
      }
      this.from = {
        capability: capablityFrom,
        name: nameFrom,
        host: hostFrom
      };
      this.to = {
        capability: capabilityTo,
        name: nameTo,
        host: hostTo
      };
    }

    Testcase.parseUrl = function(urlInfo) {
      var description, preHandle, selector, url;
      if (Object.prototype.toString.call(urlInfo) === '[object Object]') {
        description = _.first(_.keys(urlInfo));
        urlInfo = urlInfo[description];
      }
      if (_.isArray(urlInfo)) {
        url = _.first(urlInfo);
        if (_.isFunction(_.last(urlInfo))) {
          preHandle = _.last(urlInfo);
        }
        if (_.isString(urlInfo[1])) {
          selector = urlInfo[1];
        }
      } else if (_.isString(urlInfo)) {
        url = urlInfo;
      }
      return [url, selector, preHandle, description];
    };

    Testcase.getPathKey = function(url) {
      var description, path, preHandle, ref, selector;
      ref = Testcase.parseUrl(url), path = ref[0], selector = ref[1], preHandle = ref[2], description = ref[3];
      if (_.isString(description)) {
        path = description;
      } else if (_.isString(selector)) {
        if (_.isString(selector)) {
          path = path + " (" + selector + ")";
        }
      }
      return path;
    };

    Testcase.prototype.pathKey = function() {
      return Testcase.getPathKey(this.url);
    };

    Testcase.prototype.key = function() {
      var path;
      path = this.pathKey();
      if (this.from.name === this.to.name) {
        path = this.from.name + ':' + path;
      }
      return path;
    };

    return Testcase;

  })();

  module.exports = Testcase;

}).call(this);

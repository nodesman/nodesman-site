// Generated by CoffeeScript 1.9.1
(function() {
  var Canvas, Capability, Comparison, EventEmitter, Q, Testcase, Viff, _, async, dataUrlHelper, util, wd,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  _ = require('underscore');

  util = require('util');

  EventEmitter = require('events').EventEmitter;

  Q = require('q');

  async = require('async');

  wd = require('wd');

  Canvas = require('canvas');

  Comparison = require('./comparison');

  Testcase = require('./testcase');

  Capability = require('./capability');

  dataUrlHelper = require('./image.dataurl.helper');

  Viff = (function(superClass) {
    extend(Viff, superClass);

    function Viff(seleniumHost) {
      EventEmitter.call(this);
      this.builder = wd.promiseChainRemote(seleniumHost);
      this.drivers = {};
    }

    Viff.prototype.takeScreenshot = function(capability, host, url, callback) {
      var defer, driver, parsedUrl, preHandle, ref, selector, that;
      that = this;
      defer = Q.defer();
      defer.promise.then(callback);
      capability = new Capability(capability);
      if (!(driver = this.drivers[capability.key()])) {
        this.drivers[capability.key()] = driver = this.builder.init(capability);
      }
      ref = Testcase.parseUrl(url), parsedUrl = ref[0], selector = ref[1], preHandle = ref[2];
      driver.get(host + parsedUrl).then(function() {
        var prepromise;
        if (_.isFunction(preHandle)) {
          prepromise = Q.fcall(function() {
            return preHandle(driver, wd);
          });
        } else {
          prepromise = Q();
        }
        return prepromise.then(function() {
          return driver.takeScreenshot(function(err, base64Img) {
            if (_.isString(selector)) {
              return Viff.dealWithPartial(base64Img, driver, selector, defer.resolve)["catch"](defer.reject);
            } else {
              return defer.resolve(new Buffer(base64Img, 'base64'));
            }
          })["catch"](defer.reject);
        });
      });
      return defer.promise;
    };

    Viff.constructCases = function(capabilities, envHosts, links) {
      var cases;
      cases = [];
      _.each(links, function(url) {
        return _.each(capabilities, function(capability) {
          var capabilityFrom, capabilityTo, envFromHost, envToHost, from, ref, ref1, ref2, to;
          if (_.isArray(capability)) {
            capabilityFrom = capability[0], capabilityTo = capability[1];
            return _.each(envHosts, function(host, envName) {
              return cases.push(new Testcase(capabilityFrom, capabilityTo, host, host, envName, envName, url));
            });
          } else {
            ref = _.pairs(envHosts), (ref1 = ref[0], from = ref1[0], envFromHost = ref1[1]), (ref2 = ref[1], to = ref2[0], envToHost = ref2[1]);
            return cases.push(new Testcase(capability, capability, envFromHost, envToHost, from, to, url));
          }
        });
      });
      return cases;
    };

    Viff.split = function(cases, count) {
      var _case, groups, idx;
      groups = [];
      while (count--) {
        groups.push([]);
      }
      for (idx in cases) {
        _case = cases[idx];
        groups[idx % groups.length].push(_case);
      }
      return groups;
    };

    Viff.prototype.run = function(cases, callback) {
      var defer, start, that;
      defer = Q.defer();
      defer.promise.then(callback);
      that = this;
      this.emit('before', cases);
      start = Date.now();
      async.eachSeries(cases, function(_case, next) {
        var compareFrom, startcase;
        startcase = Date.now();
        that.emit('beforeEach', _case, 0);
        compareFrom = that.takeScreenshot(_case.from.capability, _case.from.host, _case.url);
        return Q.allSettled([compareFrom]).then(function(arg) {
          var compareTo, fs;
          fs = arg[0];
          compareTo = that.takeScreenshot(_case.to.capability, _case.to.host, _case.url);
          return Q.allSettled([compareTo]).then(function(arg1) {
            var ts;
            ts = arg1[0];
            debugger;
            if (fs.reason || ts.reason) {
              that.emit('afterEach', _case, 0, fs.reason, ts.reason);
              return next();
            } else if (fs.value && ts.value) {
              return Viff.runCase(_case, fs.value, ts.value).then(function(c) {
                that.emit('afterEach', _case, Date.now() - startcase, fs.reason, ts.reason);
                return next();
              });
            } else {
              that.emit('afterEach', _case, 0, fs.reason, ts.reason);
              return next();
            }
          });
        });
      }, function(err) {
        var endTime;
        endTime = Date.now() - start;
        that.emit('after', cases, endTime);
        defer.resolve([cases, endTime]);
        return that.closeDrivers();
      });
      return defer.promise;
    };

    Viff.runCase = function(_case, fromImage, toImage, callback) {
      var comparison, diff, imgWithEnvs;
      imgWithEnvs = _.object([[_case.from.capability.key() + '-' + _case.from.name, fromImage], [_case.to.capability.key() + '-' + _case.to.name, toImage]]);
      comparison = new Comparison(imgWithEnvs);
      diff = comparison.diff(function(diffImg) {
        _case.result = comparison;
        return _case;
      });
      callback && diff.then(callback);
      return diff;
    };

    Viff.prototype.closeDrivers = function() {
      var browser, results;
      results = [];
      for (browser in this.drivers) {
        results.push(this.drivers[browser].quit());
      }
      return results;
    };

    Viff.dealWithPartial = function(base64Img, driver, selector, callback) {
      return driver.elementByCss(selector).then(function(elem) {
        return Q.all([elem.getLocation(), elem.getSize()]).then(function(arg) {
          var ctx, cvs, img, location, size;
          location = arg[0], size = arg[1];
          cvs = new Canvas(size.width, size.height);
          ctx = cvs.getContext('2d');
          img = new Canvas.Image;
          img.src = new Buffer(base64Img, 'base64');
          ctx.drawImage(img, location.x, location.y, size.width, size.height, 0, 0, size.width, size.height);
          return cvs.toBuffer();
        });
      }).then(callback);
    };

    return Viff;

  })(EventEmitter);

  module.exports = Viff;

}).call(this);
